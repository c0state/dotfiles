#----- detect platform
PLATFORM=`uname`

#----- always use full color terminal
export TERM=xterm-256color

#----- increase history file sizes
export HISTSIZE=10000
export HISTFILESIZE=20000

export EDITOR=vim

#----- set based on platform (Linux or OS X)
if [[ $PLATFORM == 'Linux' ]]; then
  export PATH=$PATH:/usr/local/heroku/bin

  if [[ -e $HOME/Android/sdk ]]; then
    export PATH=$PATH:$HOME/Android/sdk/tools/bin:$HOME/Android/sdk/platform-tools
  fi
elif [[ $PLATFORM == 'Darwin' ]]; then
  # if homebrew is installed put it's bin dir first
  if [[ -e /usr/local/bin/brew ]]; then
    export PATH=/usr/local/opt/coreutils/libexec/gnubin:/usr/local/bin:/usr/local/sbin:$PATH
    export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
  fi

  # if heroku toolbelt is installed
  if [[ -e /usr/local/heroku/bin ]]; then
    export PATH=/usr/local/heroku/bin:$PATH
  fi

  # if android studio platform tools are installed
  if [[ -e $HOME/Library/Android/sdk ]]; then
    export PATH=$HOME/Library/Android/sdk/platform-tools:$HOME/Library/Android/sdk/tools/bin:$PATH
  fi

  if [ -n "$BASH_VERSION" ]; then
    if [ -f $(brew --prefix)/share/bash-completion/bash_completion ]; then
      source $(brew --prefix)/share/bash-completion/bash_completion
    fi
  fi

  # add fastlane to path
  if [[ -e $HOME/.fastlane/bin ]]; then
    export PATH=$HOME/.fastlane/bin:$PATH
  fi
fi 

#----- php version manager
if [[ -e "${HOME}/.php-version" ]] ; then
  export PHP_VERSIONS="${HOME}/.php-version/versions"
  source $HOME/.php-version/php-version.sh && php-version 5
fi

#----- pyenv
if [[ -e "$HOME/.pyenv" ]] ; then
  export PYENV_ROOT=$HOME/.pyenv
  export PATH="$HOME/.pyenv/bin:$PATH"
  eval "$(pyenv init -)"
  export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"
  export PYENV_VIRTUALENV_DISABLE_PROMPT=1 # simulate new behavior, remove when it's complete
  eval "$(pyenv virtualenv-init -)"
fi

export PATH=$PATH:$(python -m site --user-base)/bin

#----- poetry python tool
export PATH="$PATH:$HOME/.poetry/bin"

#----- golang and gvm (go version manager)
if [[ $PLATFORM == 'Darwin' ]]; then
    export GOROOT_BOOTSTRAP=$(brew --prefix)/Cellar/go/1.7.1/libexec
fi
[[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"

# source anyenv
export PATH="$HOME/.anyenv/bin:$PATH"
eval "$(anyenv init -)"

# source git-subrepo
if [[ -e $HOME/.git-subrepo/.rc ]]; then
    source $HOME/.git-subrepo/.rc
fi

#----- set terminal title
if [[ $TERM == xterm* ]] || [[ $TERM == rxvt* ]]
then
  export PROMPT_COMMAND='echo -ne "\033]0;${PWD}\007"'
fi

#----- set shell prompt
export PS1='\[\e[0;31m\][\D{%Y-%m-%d} \t]\[\e[m\]\[\e[0;37m\]\u@\h\[\e[m\]\[\e[0;32m\][$HOSTTYPE][\w]\[\e[m\]\n> '

#----- load aspnet k version manager (kvm)
[ -s "${HOME}/.kre/kvm/kvm.sh" ] && . "${HOME}/.kre/kvm/kvm.sh" # Load kvm

#----- add system agnostic apps to path
export PATH=$PATH:$HOME/bin

#----- for Amazon AWS EC2 tools
export EC2_HOME=$HOME/Dropbox/Apps/Universal/ec2-api-tools-1.4.2.4
export EC2_PRIVATE_KEY=$HOME/Dropbox/AmazonAWS/X509Key
export EC2_CERT=$HOME/Dropbox/AmazonAWS/X509Cert

# use vi bindings
#set -o vi

eval "$(rbenv init -)"

source $HOME/.bash_aliases

# source any custom bashrc configuration
if [[ -e $HOME/.bashrc_custom ]] ; then
  source $HOME/.bashrc_custom
fi

